<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.usertest.store.mapper.UserMapper">

    <!-- 결과 맵 정의: User 클래스와 데이터베이스 컬럼 매핑 -->
    <resultMap id="UserResultMap" type="User">
        <id property="id" column="id"/>
        <result property="username" column="username"/>
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="role" column="role"/>
        <result property="enabled" column="enabled"/>
        <result property="keycloakUserId" column="keycloak_user_id"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <!-- 공통 컬럼 정의 -->
    <sql id="userColumns">
        id, username, email, password, role, enabled, keycloak_user_id, created_at, updated_at
    </sql>

    <!-- ID로 사용자 조회 -->
    <select id="findById" parameterType="long" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE id = #{id}
    </select>

    <!-- 사용자명으로 사용자 조회 -->
    <select id="findByUsername" parameterType="string" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE username = #{username}
    </select>

    <!-- 이메일로 사용자 조회 -->
    <select id="findByEmail" parameterType="string" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        WHERE email = #{email}
    </select>

    <!-- 모든 사용자 조회 (생성일 기준 내림차순) -->
    <select id="findAll" resultMap="UserResultMap">
        SELECT <include refid="userColumns"/>
        FROM users 
        ORDER BY created_at DESC
    </select>

    <!-- 사용자 신규 등록 -->
    <insert id="insert" parameterType="User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO users (
            username, 
            email, 
            password, 
            role, 
            enabled, 
            keycloak_user_id,
            created_at, 
            updated_at
        ) VALUES (
            #{username}, 
            #{email}, 
            #{password}, 
            #{role}, 
            #{enabled}, 
            #{keycloakUserId},
            NOW(), 
            NOW()
        )
    </insert>

    <!-- 사용자 정보 수정 -->
    <update id="update" parameterType="User">
        UPDATE users SET 
            username = #{username},
            email = #{email},
            password = #{password},
            role = #{role},
            enabled = #{enabled},
            keycloak_user_id = #{keycloakUserId},
            updated_at = NOW()
        WHERE id = #{id}
    </update>

    <!-- ID로 사용자 삭제 -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM users 
        WHERE id = #{id}
    </delete>

    <!-- 사용자명 중복 확인 -->
    <select id="existsByUsername" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM users 
        WHERE username = #{username}
    </select>

    <!-- 이메일 중복 확인 -->
    <select id="existsByEmail" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0
        FROM users 
        WHERE email = #{email}
    </select>

</mapper>